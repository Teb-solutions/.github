name: repo-name-lint
on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 8 * * *" # daily 02:00 UTC
permissions:
  contents: read
  issues: write
  actions: read
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PAT }}  # org-scoped PAT or GitHub App token
          script: |
            const org = 'Teb-solutions';
            // Strict naming:
            // product-context-layer[-tech]
            // layer: api|ui|worker|infra
            // tech (optional): dotnet|react|terraform
            // all lowercase/digits, kebab only; total length <= 40
            const NAME_RE = /^([a-z0-9]+)-([a-z0-9]+)-(api|ui|firmware|worker|infra)(?:-(dotnet|react|angular|python|java|terraform))?$/;
      
            const MAX_LEN = 40;
            const ISSUE_TITLE = 'Repo name violates TEBS convention';
            const ISSUE_BODY = [
              'Expected: `product-context-layer[-tech]` (kebab-case, ≤40 chars).',
              'Allowed `layer`: **api | ui | worker | infra | firmware**',
              'Allowed `tech` (optional): **dotnet | react | angular | python | java | terraform**',
              'Examples:',
              '- `cylintory-profile-api-dotnet`',
              '- `org360-licensing-ui-react`',
              '- `org360-licensing-worker` (no tech)',
              '',
              'Please rename in **Settings → Rename** and close this issue.'
            ].join('\n');
      
            const repos = await github.paginate(github.rest.repos.listForOrg, { org, per_page: 100 });
      
            for (const r of repos) {
              if (r.archived || r.disabled) continue;
      
              const ok = NAME_RE.test(r.name) && r.name.length <= MAX_LEN;
      
              if (ok) continue;
      
              // Avoid duplicates
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: org, repo: r.name, state: 'open', per_page: 100
              });
              if (issues.some(i => i.title === ISSUE_TITLE)) continue;
      
              await github.rest.issues.create({
                owner: org, repo: r.name,
                title: ISSUE_TITLE,
                body: `${ISSUE_BODY}\n\n**Current name:** \`${r.name}\``
              });
            }
